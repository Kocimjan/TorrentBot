"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –≤ Telegram
"""
import time
import math
from typing import Dict, Any, Optional
from datetime import datetime, timedelta


class ProgressBar:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    
    def __init__(self, width: int = 20):
        self.width = width
        self.start_time = time.time()
        self.last_update = 0
        
    def create_bar(self, progress: float, show_percentage: bool = True) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        
        Args:
            progress: –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 100
            show_percentage: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        """
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º 0-100
        progress = max(0, min(100, progress))
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        filled_length = int(self.width * progress / 100)
        
        # –°–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        filled_char = "‚ñà"
        partial_chars = ["", "‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ"]
        empty_char = "‚ñë"
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å –±–∞—Ä–∞
        bar = filled_char * filled_length
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –±–ª–æ–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if filled_length < self.width:
            partial_progress = (self.width * progress / 100) - filled_length
            partial_index = int(partial_progress * len(partial_chars))
            if partial_index > 0:
                bar += partial_chars[partial_index]
                filled_length += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
        bar += empty_char * (self.width - len(bar))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if show_percentage:
            bar = f"[{bar}] {progress:.1f}%"
        else:
            bar = f"[{bar}]"
        
        return bar
    
    def format_speed(self, bytes_per_second: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏"""
        if bytes_per_second == 0:
            return "0 –ë/—Å"
        
        units = ["–ë/—Å", "–ö–ë/—Å", "–ú–ë/—Å", "–ì–ë/—Å"]
        unit_index = 0
        speed = float(bytes_per_second)
        
        while speed >= 1024 and unit_index < len(units) - 1:
            speed /= 1024
            unit_index += 1
        
        return f"{speed:.1f} {units[unit_index]}"
    
    def format_size(self, bytes_size: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
        if bytes_size == 0:
            return "0 –ë"
        
        units = ["–ë", "–ö–ë", "–ú–ë", "–ì–ë", "–¢–ë"]
        unit_index = 0
        size = float(bytes_size)
        
        while size >= 1024 and unit_index < len(units) - 1:
            size /= 1024
            unit_index += 1
        
        return f"{size:.1f} {units[unit_index]}"
    
    def format_time(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è"""
        if seconds <= 0 or seconds > 8640000:  # –ë–æ–ª—å—à–µ 100 –¥–Ω–µ–π
            return "‚àû"
        
        if seconds < 60:
            return f"{seconds}—Å"
        elif seconds < 3600:
            minutes = seconds // 60
            return f"{minutes}–º {seconds % 60}—Å"
        elif seconds < 86400:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours}—á {minutes}–º"
        else:
            days = seconds // 86400
            hours = (seconds % 86400) // 3600
            return f"{days}–¥ {hours}—á"
    
    def create_detailed_message(self, info: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        
        Args:
            info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä—Ä–µ–Ω—Ç–µ
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        name = info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        progress = info.get('progress', 0)
        state = info.get('state', 'unknown')
        size = info.get('size', 0)
        downloaded = info.get('downloaded', 0)
        download_speed = info.get('download_speed', 0)
        upload_speed = info.get('upspeed', 0)
        eta = info.get('eta', 0)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = self.create_bar(progress)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_emojis = {
            'downloading': '‚¨áÔ∏è',
            'stalledDL': '‚è∏Ô∏è',
            'queuedDL': '‚è≥',
            'uploading': '‚¨ÜÔ∏è',
            'stalledUP': '‚úÖ',
            'pausedDL': '‚è∏Ô∏è',
            'pausedUP': '‚è∏Ô∏è',
            'error': '‚ùå',
            'checkingDL': 'üîç',
            'checkingUP': 'üîç',
            'queuedUP': 'üîÑ',
            'allocating': 'üíæ',
            'moving': 'üìÅ'
        }
        
        state_emoji = state_emojis.get(state, '‚ùì')
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        state_translations = {
            'downloading': '–°–∫–∞—á–∏–≤–∞–µ—Ç—Å—è',
            'stalledDL': '–û–∂–∏–¥–∞–Ω–∏–µ –ø–∏—Ä–æ–≤',
            'queuedDL': '–í –æ—á–µ—Ä–µ–¥–∏',
            'uploading': '–†–∞–∑–¥–∞–µ—Ç—Å—è',
            'stalledUP': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            'pausedDL': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            'pausedUP': '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            'error': '–û—à–∏–±–∫–∞',
            'checkingDL': '–ü—Ä–æ–≤–µ—Ä–∫–∞',
            'checkingUP': '–ü—Ä–æ–≤–µ—Ä–∫–∞',
            'queuedUP': '–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Ä–∞–∑–¥–∞—á—É',
            'allocating': '–í—ã–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞',
            'moving': '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤'
        }
        
        state_text = state_translations.get(state, state)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = [
            f"üé¨ **{name[:50]}{'...' if len(name) > 50 else ''}**",
            f"",
            f"{progress_bar}",
            f"",
            f"{state_emoji} **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {state_text}",
            f"üìä **–†–∞–∑–º–µ—Ä:** {self.format_size(size)}",
            f"üì• **–°–∫–∞—á–∞–Ω–æ:** {self.format_size(downloaded)}"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å, –µ—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è
        if download_speed > 0:
            lines.append(f"‚ö° **–°–∫–æ—Ä–æ—Å—Ç—å:** {self.format_speed(download_speed)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–¥–∞—á–∏, –µ—Å–ª–∏ —Ä–∞–∑–¥–∞–µ—Ç—Å—è
        if upload_speed > 0:
            lines.append(f"‚¨ÜÔ∏è **–û—Ç–¥–∞—á–∞:** {self.format_speed(upload_speed)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        if eta > 0 and state in ['downloading', 'stalledDL', 'queuedDL']:
            lines.append(f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** {self.format_time(eta)}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        elapsed = time.time() - self.start_time
        lines.append(f"üïê **–í—Ä–µ–º—è:** {self.format_time(int(elapsed))}")
        
        return "\n".join(lines)


class TorrentProgressTracker:
    """–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤ —Å —É–º–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.progress_bars: Dict[str, ProgressBar] = {}
        self.last_updates: Dict[str, float] = {}
        self.last_progress: Dict[str, float] = {}
        
    def should_update(self, torrent_hash: str, current_progress: float, force: bool = False) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        
        Args:
            torrent_hash: –•—ç—à —Ç–æ—Ä—Ä–µ–Ω—Ç–∞
            current_progress: –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        
        Returns:
            True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        """
        if force:
            return True
        
        now = time.time()
        last_update = self.last_updates.get(torrent_hash, 0)
        last_progress = self.last_progress.get(torrent_hash, -1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        time_threshold = 30
        
        # –ò–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ 5%
        progress_threshold = 5.0
        
        # –ò–ª–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –≤–∞–∂–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ (25%, 50%, 75%, 90%, 95%, 99%, 100%)
        important_milestones = [25, 50, 75, 90, 95, 99, 100]
        
        time_passed = now - last_update >= time_threshold
        significant_progress = abs(current_progress - last_progress) >= progress_threshold
        milestone_reached = any(
            last_progress < milestone <= current_progress 
            for milestone in important_milestones
        )
        
        return time_passed or significant_progress or milestone_reached
    
    def get_progress_bar(self, torrent_hash: str) -> ProgressBar:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞"""
        if torrent_hash not in self.progress_bars:
            self.progress_bars[torrent_hash] = ProgressBar()
        return self.progress_bars[torrent_hash]
    
    def update_progress(self, torrent_hash: str, progress: float):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ—Ä—Ä–µ–Ω—Ç–∞"""
        self.last_updates[torrent_hash] = time.time()
        self.last_progress[torrent_hash] = progress
    
    def cleanup_torrent(self, torrent_hash: str):
        """–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞"""
        self.progress_bars.pop(torrent_hash, None)
        self.last_updates.pop(torrent_hash, None)
        self.last_progress.pop(torrent_hash, None)
    
    def create_summary_message(self, torrents_info: list) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–∞—Ö"""
        if not torrents_info:
            return "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤"
        
        lines = ["üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã:**", ""]
        
        for info in torrents_info:
            name = info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            progress = info.get('progress', 0)
            state = info.get('state', 'unknown')
            
            # –ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            short_bar = ProgressBar(width=10).create_bar(progress, show_percentage=False)
            
            # –≠–º–æ–¥–∑–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_emoji = {
                'downloading': '‚¨áÔ∏è',
                'uploading': '‚¨ÜÔ∏è',
                'stalledUP': '‚úÖ',
                'stalledDL': '‚è∏Ô∏è',
                'error': '‚ùå'
            }.get(state, '‚ùì')
            
            lines.append(f"{state_emoji} {short_bar} {progress:.0f}% - {name[:30]}{'...' if len(name) > 30 else ''}")
        
        return "\n".join(lines)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
progress_tracker = TorrentProgressTracker()
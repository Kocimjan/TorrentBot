"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π userbot –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.
"""
import os
import asyncio
import logging
from typing import Optional, Callable, Any, Union
from telegram import Bot
from telegram.error import TelegramError

from src.userbot.uploader import get_userbot_file_manager, should_use_userbot
from src.userbot.config import UserbotConfig
from src.file_manager import FileManager

logger = logging.getLogger(__name__)


class SmartFileSender:
    """–£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞."""
    
    def __init__(self, bot: Bot, file_manager: FileManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ñ–∞–π–ª–æ–≤.
        
        Args:
            bot: Telegram Bot instance
            file_manager: –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        """
        self.bot = bot
        self.file_manager = file_manager
        self.userbot_manager = None
        self.userbot_config = UserbotConfig.from_env()
        self.logger = logging.getLogger(f"{__name__}.SmartFileSender")
        self._userbot_initialized = False
        
        # Userbot –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    
    async def _ensure_userbot_initialized(self):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ userbot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)."""
        if not self._userbot_initialized:
            await self._init_userbot()
            self._userbot_initialized = True
    
    async def _init_userbot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        try:
            if self.userbot_config.is_configured():
                self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤...")
                self.userbot_manager = await get_userbot_file_manager(self.userbot_config)
                
                if self.userbot_manager and self.userbot_manager.is_available():
                    self.logger.info("Userbot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
                else:
                    self.logger.warning("Userbot –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–º–æ–∂–µ—Ç –Ω–µ —Ö–≤–∞—Ç–∞—Ç—å –ø—Ä–∞–≤ –∏–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
                    self.userbot_manager = None
            else:
                self.logger.info("Userbot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Bot API (–¥–æ 50 –ú–ë) –∏ —Ä–∞–∑–±–∏–≤–∫—É —Ñ–∞–π–ª–æ–≤")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ userbot: {e}")
            self.logger.info("–ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ Bot API (–¥–æ 50 –ú–ë) –∏ —Ä–∞–∑–±–∏–≤–∫—É —Ñ–∞–π–ª–æ–≤")
            self.userbot_manager = None
    
    async def send_file(
        self,
        chat_id: Union[int, str],
        file_path: str,
        filename: Optional[str] = None,
        caption: Optional[str] = None,
        progress_callback: Optional[Callable[[int, int], Any]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            filename: –ò–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            caption: –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É
            progress_callback: –ö–æ–ª–±—ç–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if not os.path.exists(file_path):
            self.logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False
        
        if filename is None:
            filename = os.path.basename(file_path)
        
        file_size = os.path.getsize(file_path)
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞: {filename} ({self._format_size(file_size)})")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º userbot –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        await self._ensure_userbot_initialized()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if should_use_userbot(file_path, self.userbot_config) and self.userbot_manager and self.userbot_manager.is_available():
            self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º userbot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {filename}")
            return await self._send_via_userbot(chat_id, file_path, filename, caption, progress_callback)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç Bot API (50 –ú–ë - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç Telegram Bot API)
            if file_size > 50 * 1024 * 1024:  # 50 –ú–ë
                self.logger.info(f"–†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏: {filename}")
                return await self._send_via_split(chat_id, file_path, filename, caption)
            else:
                self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Bot API: {filename}")
                return await self._send_via_bot_api(chat_id, file_path, filename, caption)
    
    async def _send_via_userbot(
        self,
        chat_id: Union[int, str],
        file_path: str,
        filename: str,
        caption: Optional[str],
        progress_callback: Optional[Callable[[int, int], Any]]
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ userbot (–¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤).
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            caption: –ü–æ–¥–ø–∏—Å—å
            progress_callback: –ö–æ–ª–±—ç–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ userbot: {filename}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=chat_id,
                text=f"üì¶ {filename}\n\n‚ö†Ô∏è –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (50 –ú–ë)\nüîÑ –ó–∞–≥—Ä—É–∂–∞—é —á–µ—Ä–µ–∑ userbot..."
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ userbot
            if self.userbot_manager:
                file_id = await self.userbot_manager.upload_large_file(file_path, progress_callback)
            else:
                file_id = None
            
            if not file_id:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id –æ—Ç userbot")
                return await self._send_via_split(chat_id, file_path, filename, caption)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ file_id
            try:
                await self.bot.send_document(
                    chat_id=chat_id,
                    document=file_id,
                    filename=filename,
                    caption=caption
                )
                
                self.logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ userbot: {filename}")
                return True
                
            except TelegramError as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ file_id: {e}")
                # Fallback –Ω–∞ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
                return await self._send_via_split(chat_id, file_path, filename, caption)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ userbot: {e}")
            # Fallback –Ω–∞ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
            return await self._send_via_split(chat_id, file_path, filename, caption)
    
    async def _send_via_bot_api(
        self,
        chat_id: Union[int, str],
        file_path: str,
        filename: str,
        caption: Optional[str]
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π Bot API.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            caption: –ü–æ–¥–ø–∏—Å—å
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            with open(file_path, 'rb') as file:
                await self.bot.send_document(
                    chat_id=chat_id,
                    document=file,
                    filename=filename,
                    caption=caption
                )
            
            self.logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Bot API: {filename}")
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Bot API: {e}")
            return False
    
    async def _send_via_split(
        self,
        chat_id: Union[int, str],
        file_path: str,
        filename: str,
        caption: Optional[str]
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —á–∞—Å—Ç—è–º (fallback –º–µ—Ç–æ–¥).
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            caption: –ü–æ–¥–ø–∏—Å—å
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        try:
            self.logger.info(f"–†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏: {filename}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.bot.send_message(
                chat_id=chat_id,
                text=f"üì¶ {filename}\n\n‚ö†Ô∏è –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (50 –ú–ë)\nüìÑ –†–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏..."
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏–∑ FileManager
            if self.file_manager.needs_splitting(file_path):
                parts = self.file_manager.split_file_7z(file_path, os.path.dirname(file_path))
                
                for i, part_path in enumerate(parts, 1):
                    try:
                        part_filename = f"{filename}.part{i}"
                        with open(part_path, 'rb') as part_file:
                            await self.bot.send_document(
                                chat_id=chat_id,
                                document=part_file,
                                filename=part_filename,
                                caption=f"–ß–∞—Å—Ç—å {i}/{len(parts)}" + (f"\n{caption}" if caption and i == 1 else "")
                            )
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
                        os.remove(part_path)
                        
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i}: {e}")
                        return False
                
                self.logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ —á–∞—Å—Ç—è–º: {filename}")
                return True
            else:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å —Ñ–∞–π–ª: {filename}")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def _format_size(self, size: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞."""
        size_float = float(size)
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
            if size_float < 1024.0:
                return f"{size_float:.1f} {unit}"
            size_float /= 1024.0
        return f"{size_float:.1f} –¢–ë"
    
    async def is_userbot_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ userbot."""
        await self._ensure_userbot_initialized()
        return self.userbot_manager is not None and self.userbot_manager.is_available()
    
    async def get_userbot_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ userbot."""
        await self._ensure_userbot_initialized()
        if self.userbot_manager:
            return self.userbot_manager.get_storage_stats()
        return {}
    
    async def cleanup_userbot_cache(self, max_age_days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ userbot."""
        await self._ensure_userbot_initialized()
        if self.userbot_manager:
            await self.userbot_manager.cleanup_old_files(max_age_days)
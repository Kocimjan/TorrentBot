"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ userbot.
"""
import os
import time
import asyncio
import logging
from typing import Optional, Callable, Any
from pathlib import Path

from pyrogram.types import Message
from pyrogram.errors import FloodWait, FilePartMissing, FileMigrate

from .client import UserbotClient, get_userbot_manager
from .config import UserbotConfig
from ..shared.file_id_storage import FileIdStorage, FileUploadRecord


class FileUploader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ userbot."""
    
    def __init__(self, userbot_client: UserbotClient, storage: FileIdStorage):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞.
        
        Args:
            userbot_client: –ö–ª–∏–µ–Ω—Ç userbot
            storage: –•—Ä–∞–Ω–∏–ª–∏—â–µ file_id
        """
        self.userbot_client = userbot_client
        self.storage = storage
        self.logger = logging.getLogger(f"{__name__}.FileUploader")
    
    async def upload_file(
        self,
        file_path: str,
        progress_callback: Optional[Callable[[int, int], Any]] = None,
        force_upload: bool = False
    ) -> Optional[FileUploadRecord]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ userbot.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            progress_callback: –ö–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            force_upload: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ –∫—ç—à–µ
            
        Returns:
            –ó–∞–ø–∏—Å—å –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            self.logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if not force_upload:
            cached_record = self.storage.get_file_id(file_path)
            if cached_record:
                self.logger.info(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {file_path}")
                return cached_record
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = self.userbot_client.get_client()
        if not client:
            self.logger.error("Userbot –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —á–∞—Ç
        if not await self.userbot_client.check_storage_chat():
            self.logger.error("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        try:
            self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞: {file_path}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(file_path)
            file_name = os.path.basename(file_path)
            
            # –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def upload_progress(current: int, total: int):
                if progress_callback:
                    progress_callback(current, total)
                
                if current % (1024 * 1024 * 10) == 0:  # –ö–∞–∂–¥—ã–µ 10 –ú–ë
                    progress_percent = (current / total) * 100
                    self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {current}/{total} –±–∞–π—Ç ({progress_percent:.1f}%)")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —á–∞—Ç
            storage_chat_id = self.userbot_client.config.storage_chat_id
            if not storage_chat_id:
                self.logger.error("ID –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return None
            
            message = await client.send_document(
                chat_id=storage_chat_id,
                document=file_path,
                file_name=file_name,
                progress=upload_progress,
                caption=f"üìÅ {file_name}\nüìê {self._format_file_size(file_size)}"
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id
            if not message:
                self.logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
                return None
                
            file_id = None
            file_unique_id = None
            file_type = None
            
            if hasattr(message, 'document') and message.document:
                file_id = message.document.file_id
                file_unique_id = message.document.file_unique_id
                file_type = "document"
            elif hasattr(message, 'video') and message.video:
                file_id = message.video.file_id
                file_unique_id = message.video.file_unique_id
                file_type = "video"
            elif hasattr(message, 'audio') and message.audio:
                file_id = message.audio.file_id
                file_unique_id = message.audio.file_unique_id
                file_type = "audio"
            else:
                self.logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                return None
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
            record = FileUploadRecord(
                file_path=file_path,
                file_id=file_id,
                file_unique_id=file_unique_id,
                file_size=file_size,
                file_type=file_type,
                upload_timestamp=time.time(),
                chat_id=message.chat.id if hasattr(message, 'chat') and message.chat else 0,
                message_id=message.id if hasattr(message, 'id') else 0
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if self.storage.store_file_id(record):
                self.logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path} -> {file_id}")
                return record
            else:
                self.logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                return None
                
        except FloodWait as e:
            wait_time = float(e.value) if isinstance(e.value, (int, str)) else 60.0
            self.logger.warning(f"Rate limit, –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(wait_time)
            return await self.upload_file(file_path, progress_callback, force_upload)
            
        except (FilePartMissing, FileMigrate) as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
            
        except Exception as e:
            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def _format_file_size(self, size: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞."""
        size_float = float(size)
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
            if size_float < 1024.0:
                return f"{size_float:.1f} {unit}"
            size_float /= 1024.0
        return f"{size_float:.1f} –¢–ë"
    
    async def check_file_exists(self, file_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –∫—ç—à–µ.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å –≤ –∫—ç—à–µ
        """
        return self.storage.file_exists(file_path)
    
    async def get_cached_file_id(self, file_path: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ file_id –∏–∑ –∫—ç—à–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            file_id –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        record = self.storage.get_file_id(file_path)
        return record.file_id if record else None


class UserbotFileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ userbot."""
    
    def __init__(self, config: Optional[UserbotConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è userbot
        """
        self.config = config or UserbotConfig.from_env()
        self.storage = FileIdStorage()
        self.uploader: Optional[FileUploader] = None
        self.logger = logging.getLogger(f"{__name__}.UserbotFileManager")
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        """
        if not self.config.is_configured():
            self.logger.warning("Userbot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False
        
        manager = get_userbot_manager(self.config)
        userbot_client = await manager.get_client()
        
        if not userbot_client:
            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å userbot –∫–ª–∏–µ–Ω—Ç")
            return False
        
        self.uploader = FileUploader(userbot_client, self.storage)
        self.logger.info("UserbotFileManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    
    def is_large_file(self, file_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–∏–º.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Bot API
        """
        if not os.path.exists(file_path):
            return False
        
        file_size = os.path.getsize(file_path)
        return file_size > self.config.max_file_size
    
    def is_available(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ userbot.
        
        Returns:
            True –µ—Å–ª–∏ userbot –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
        """
        return self.uploader is not None
    
    async def upload_large_file(
        self,
        file_path: str,
        progress_callback: Optional[Callable[[int, int], Any]] = None
    ) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ file_id.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            progress_callback: –ö–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            file_id –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.uploader:
            self.logger.error("Uploader –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        record = await self.uploader.upload_file(file_path, progress_callback)
        return record.file_id if record else None
    
    async def get_file_id(self, file_path: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ file_id —Ñ–∞–π–ª–∞ (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–æ–π).
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            file_id –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.uploader:
            return None
        
        return await self.uploader.get_cached_file_id(file_path)
    
    def get_storage_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
        return self.storage.get_stats()
    
    async def cleanup_old_files(self, max_age_days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫—ç—à–∞."""
        self.storage.cleanup_old_records(max_age_days)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_file_manager: Optional[UserbotFileManager] = None


async def get_userbot_file_manager(config: Optional[UserbotConfig] = None) -> UserbotFileManager:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è userbot
        
    Returns:
        UserbotFileManager
    """
    global _file_manager
    
    if _file_manager is None:
        _file_manager = UserbotFileManager(config)
        await _file_manager.initialize()
    
    return _file_manager


def should_use_userbot(file_path: str, config: Optional[UserbotConfig] = None) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è userbot –¥–ª—è —Ñ–∞–π–ª–∞.
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è userbot
        
    Returns:
        True –µ—Å–ª–∏ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å userbot
    """
    if not os.path.exists(file_path):
        return False
    
    if config is None:
        config = UserbotConfig.from_env()
    
    if not config.is_configured():
        return False
    
    file_size = os.path.getsize(file_path)
    return file_size > config.max_file_size
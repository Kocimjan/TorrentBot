"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.torrent_logger import torrent_logger
from src.cleanup_manager import CleanupManager
import json


def show_stats(days=7):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π"""
    stats = torrent_logger.get_operation_stats(days)
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π:")
    print(f"–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {stats.get('total_operations', 0)}")
    
    print("\nüìà –ü–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π:")
    for op_type, count in stats.get('operations_by_type', {}).items():
        print(f"  {op_type}: {count}")
    
    print("\nüìã –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
    for status, count in stats.get('operations_by_status', {}).items():
        print(f"  {status}: {count}")
    
    print("\nüë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
    for user in stats.get('active_users', []):
        print(f"  {user['user_name']} (ID: {user['user_id']}): {user['count']} –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    total_size = stats.get('total_transferred_bytes', 0)
    if total_size > 0:
        size_gb = total_size / (1024**3)
        print(f"\nüíæ –ü–µ—Ä–µ–¥–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {size_gb:.2f} –ì–ë")


def cleanup_logs(days=30):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏"""
    print(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
    torrent_logger.cleanup_old_logs(days)
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def force_cleanup():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üóëÔ∏è –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏...")
    cleanup_manager = CleanupManager()
    cleanup_manager.force_cleanup()
    print("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def disk_usage():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"""
    cleanup_manager = CleanupManager()
    stats = cleanup_manager.get_disk_usage_stats()
    
    print("üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:")
    print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {cleanup_manager.format_size(stats.get('temp_size', 0))}")
    print(f"–ó–∞–≥—Ä—É–∑–∫–∏: {cleanup_manager.format_size(stats.get('downloads_size', 0))}")
    print(f"–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {cleanup_manager.format_size(stats.get('total_size', 0))}")
    print(f"–õ–∏–º–∏—Ç: {cleanup_manager.format_size(stats.get('max_size', 0))}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats.get('usage_percent', 0):.1f}%")
    print(f"–°–≤–æ–±–æ–¥–Ω–æ: {cleanup_manager.format_size(stats.get('free_space', 0))}")


def export_logs(output_file="logs_export.json", days=30):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ JSON"""
    print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –∑–∞ {days} –¥–Ω–µ–π –≤ {output_file}...")
    success = torrent_logger.export_logs_to_json(output_file, days)
    if success:
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Ç–∏–ª–∏—Ç—ã"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–£—Ç–∏–ª–∏—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è TorrentBot")
    parser.add_argument("command", choices=[
        "stats", "cleanup-logs", "force-cleanup", "disk-usage", "export-logs"
    ], help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    parser.add_argument("--days", type=int, default=7, 
                       help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏/–æ—á–∏—Å—Ç–∫–∏")
    parser.add_argument("--output", default="logs_export.json",
                       help="–§–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤")
    
    args = parser.parse_args()
    
    if args.command == "stats":
        show_stats(args.days)
    elif args.command == "cleanup-logs":
        cleanup_logs(args.days)
    elif args.command == "force-cleanup":
        force_cleanup()
    elif args.command == "disk-usage":
        disk_usage()
    elif args.command == "export-logs":
        export_logs(args.output, args.days)


if __name__ == "__main__":
    main()